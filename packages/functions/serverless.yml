service: postingly-functions

plugins:
  - serverless-plugin-warmup
  - serverless-prune-plugin
  - serverless-plugin-monorepo
  - serverless-dotenv-plugin
  - serverless-offline

# resources:
#   Resources:
#     stagingCreateUpdates:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: stagingCreateUpdates
#         VisibilityTimeout: 3600
#     stagingScheduleUpdates:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: stagingScheduleUpdates
#         VisibilityTimeout: 3600
#     stagingChangeCaption:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: stagingChangeCaption
#         VisibilityTimeout: 3600
#     stagingShareUpdates:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: stagingShareUpdates
#         VisibilityTimeout: 3600
#     stagingSyncStoreData:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: stagingSyncStoreData
#         VisibilityTimeout: 3600
#     stagingSyncCollectionPage:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: stagingSyncCollectionPage
#         VisibilityTimeout: 3600
#     stagingSyncProductPage:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: stagingSyncProductPage
#         VisibilityTimeout: 3600
#     stagingSyncVariantPage:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: stagingSyncVariantPage
#         VisibilityTimeout: 3600
#     stagingGetWebhooks:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: stagingGetWebhooks
#         VisibilityTimeout: 3600
#     stagingCreateWebhooks:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: stagingCreateWebhooks
#         VisibilityTimeout: 3600
#     stagingDeleteWebhooks:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: stagingDeleteWebhooks
#         VisibilityTimeout: 3600
#     productionCreateUpdates:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: productionCreateUpdates
#         VisibilityTimeout: 3600
#     productionScheduleUpdates:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: productionScheduleUpdates
#         VisibilityTimeout: 3600
#     productionChangeCaption:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: productionChangeCaption
#         VisibilityTimeout: 3600
#     productionShareUpdates:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: productionShareUpdates
#         VisibilityTimeout: 3600
#     productionSyncStoreData:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: productionSyncStoreData
#         VisibilityTimeout: 3600
#     productionSyncCollectionPage:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: productionSyncCollectionPage
#         VisibilityTimeout: 3600
#     productionSyncProductPage:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: productionSyncProductPage
#         VisibilityTimeout: 3600
#     productionSyncVariantPage:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: productionSyncVariantPage
#         VisibilityTimeout: 3600
#     productionGetWebhooks:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: productionGetWebhooks
#         VisibilityTimeout: 3600
#     productionCreateWebhooks:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: productionCreateWebhooks
#         VisibilityTimeout: 3600
#     productionDeleteWebhooks:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: productionDeleteWebhooks
#         VisibilityTimeout: 3600


provider:
  name: aws
  runtime: nodejs10.x
  stage: ${env:STAGE}
  timeout: 120 
  memorySize: 256
  vpc:
    securityGroupIds:
      - sg-0e0b1c8b49a3919d8
    subnetIds:
      - subnet-0be2e1119f5a9942b
      - subnet-08f8f22623b8c212b

  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - arn:aws:lambda:us-east-1:*:* 
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        - arn:aws:sqs:us-east-1:*:* 
        
custom:
  warmup:
    enabled: true
    folderName: '_warmup'
    cleanFolder: false
    memorySize: 256
    name: 'make-them-pop'
    vpc:
      securityGroupIds:
        - sg-0e0b1c8b49a3919d8
      subnetIds:
        - subnet-0be2e1119f5a9942b
        - subnet-08f8f22623b8c212b
      
    events:
      - schedule: 'cron(*/3 * * * ? *)'
    timeout: 20
    prewarm: true
    concurrency: 1

functions:
  # creates update for the current week. this lambda will execute every 6 hours. 
  cron-create-updates-for-this-week:
    handler: createUpdates.createUpdatesforThisWeek
    warmup:
      enabled: false
    events:
      - schedule:
          rate: cron(0 */6 * * ? *)
          enabled: true
  # creates update for the next week. this lambda will execute on every 
  # wednesday midnight
  cron-create-updates-for-next-week:
    handler: createUpdates.createUpdatesforNextWeek
    warmup:
      enabled: false
    events:
      - schedule:
          rate: cron(0 0 ? * WED *)
          enabled: true  
  # create update lambda. this function recieves rule id from either 
  # manage rule resolver or from cron-create-updates-for-next-week lambda function. 
  # this function creates updates with rule id. 
  create-updates:
    handler: createUpdates.createUpdates
    reservedConcurrency: ${env:RESERVED_CONCURRENCY_CREATE_UPDATES}
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}CreateUpdates
          batchSize: 1
          enabled: true
  
  # this lambda executes every thirty minutes and pass distinct rule 
  #  based on the updates that are not scheduled. 
  cron-this-week-rules:
    handler: cronThisWeekRulesForUpdates.excute
    warmup:
      enabled: false
    events:
      - schedule:
          rate: cron(*/30 * * * ? *)
          enabled: true
  # This updates simply takes the rule id and schedule all the not scheduled updates. 
  schedule-updates:
    handler: scheduleProductUpdates.schedule
    reservedConcurrency: ${env:RESERVED_CONCURRENCY_SCHEDULE_PRODUCT_UPDATES}
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}ScheduleUpdates
          batchSize: 1
          enabled: true
  # This lambda updates the urls for the scheduled products and also updates them in DB. 
  cron-add-product-urls:
    handler: updateProductUrls.execute
    events:
      - schedule:
          rate: cron(*/5 * * * ? *)
          enabled: true
  # This lambda takes the cron and add captions to the scheduled updates. plus also approve them. 
  cron-add-captions:
    handler: cronAddCaptions.execute
    warmup:
      enabled: false
    events:
      - schedule:
          rate: cron(*/5 * * * ? *)
          enabled: true
  # This updates simply takes the rule id and schedule all the not scheduled updates. 
  change-caption:
    handler: changeCaption.update
    reservedConcurrency: ${env:RESERVED_CONCURRENCY_CHANGE_CAPTION}
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}ChangeCaption
          batchSize: 1
          enabled: true
  # this lambda runs every 5 minutes and call share-updates lambda to post updates. 
  cron-post-updates:
    handler: cronPostUpdates.share
    warmup:
      enabled: false
    events:
      - schedule:
          rate: cron(*/5 * * * ? *)
          enabled: true
  # This lambda post updates to social media. 
  share-updates:
    handler: shareUpdates.share
    reservedConcurrency: ${env:RESERVED_CONCURRENCY_SHARE_UPDATES}
    memorySize: 1024
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}ShareUpdates
          batchSize: 1
          enabled: true
  #  product sync data.
  sync-store-data:
    handler: syncStoreData.syncStoreData  
    reservedConcurrency: ${env:RESERVED_CONCURRENCY_SYNC_STORE_DATA}
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}SyncStoreData
          batchSize: 1
          enabled: true
  sync-collections:
    handler: syncStoreData.syncCollections
  sync-collection-page:
    handler: syncStoreData.syncCollectionPage
    reservedConcurrency: ${env:RESERVED_CONCURRENCY_SYNC_COLLECTION_PAGE}
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}SyncCollectionPage
          batchSize: 1
          enabled: true
  sync-products:
    handler: syncStoreData.syncProducts
    timeout: 720 
  sync-product-page:
    handler: syncStoreData.syncProductPage
    timeout: 720
    reservedConcurrency: ${env:RESERVED_CONCURRENCY_SYNC_PRODUCT_PAGE}
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}SyncProductPage
          batchSize: 1
          enabled: true
  sync-variant-page:
    handler: syncStoreData.syncVariantPage
    timeout: 720 
    reservedConcurrency: ${env:RESERVED_CONCURRENCY_SYNC_VARIANT_PAGE}
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}SyncVariantPage
          batchSize: 1
          enabled: true
  cron-webhooks:
    handler: webhooks.cronWebhooks
    warmup:
      enabled: false
    timeout: 120 
    events:
      - schedule:
          rate: cron(0 0 * * ? *)
          enabled: true
  get-webhooks:
    handler: webhooks.getWebhooks
    warmup:
      enabled: false
    timeout: 20 
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}GetWebhooks
          batchSize: 1
          enabled: true
  create-webhooks:
    handler: webhooks.createWebhooks
    warmup:
      enabled: false
    timeout: 20
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}CreateWebhooks
          batchSize: 1
          enabled: true
  delete-webhooks:
    handler: webhooks.deleteWebhooks    
    warmup:
      enabled: false
    timeout: 20
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}DeleteWebhooks
          batchSize: 1
          enabled: true
  delete-single-webhooks:
    handler: webhooks.deleteSingleWebhook    
    warmup:
      enabled: false
    timeout: 20
  
  
  fetch-test:
    handler: seeddata.testFetch
    warmup:
      enabled: false
    timeout: 120    
    
  
  # cognito 
  cognito-create-auth-challenge:
    handler: cognito.createAuthChallenge    
  cognito-define-auth-challenge:
    handler: cognito.defineAuthChallenge    
  cognito-verify-auth-challenge:
    handler: cognito.verifyAuthChallenge    

  
  
  # Testing The Lambdas
  test-lambda:
    handler: lambdaTests.execute
    warmup:
      enabled: false
  test-webhooks-lambda:
    handler: lambdaWebhooksTests.execute
    warmup:
      enabled: false
  test-sync-lambda:
    handler: lambdaSyncTests.execute
    warmup:
      enabled: false

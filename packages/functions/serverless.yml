service: postingly-functions

plugins:
  - serverless-plugin-monorepo
  - serverless-dotenv-plugin
  - serverless-offline

resources:
  Resources:
    createUpdates:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${env:STAGE}_createUpdates
        VisibilityTimeout: 3600
    scheduleUpdates:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${env:STAGE}_scheduleUpdates
        VisibilityTimeout: 3600
    changeCaption:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${env:STAGE}_changeCaption
        VisibilityTimeout: 3600
    shareUpdates:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${env:STAGE}_shareUpdates
        VisibilityTimeout: 3600
    syncStoreData:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${env:STAGE}_syncStoreData
        VisibilityTimeout: 3600
    syncCollectionPage:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${env:STAGE}_syncCollectionPage
        VisibilityTimeout: 3600
    syncProductPage:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${env:STAGE}_syncProductPage
        VisibilityTimeout: 3600
    syncVariantPage:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${env:STAGE}_syncVariantPage
        VisibilityTimeout: 3600


provider:
  name: aws
  runtime: nodejs8.10
  stage: ${env:STAGE}
  timeout: 120 
  vpc:
    securityGroupIds:
      - sg-0e0b1c8b49a3919d8
    subnetIds:
      - subnet-0be2e1119f5a9942b
      - subnet-08f8f22623b8c212b

  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - arn:aws:lambda:us-east-1:*:* 
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        - arn:aws:sqs:us-east-1:*:* 
functions:
  # create update lambda. this function recieves rule id from either 
  # manage rule resolver or from cron-create-updates-for-next-week lambda function. 
  # this function creates updates with rule id. 
  create-updates:
    handler: createUpdates.createUpdates
    reservedConcurrency: 30
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}_createUpdates
          batchSize: 1
  # creates update for the next week. this lambda will execute on every 
  # wednesday midnight
  cron-create-updates-for-next-week:
    handler: createUpdates.createUpdatesforNextWeek
    events:
      - schedule:
          rate: cron(0 0 ? * WED *)
          enabled: true
  # this lambda executes everyday at UTC midnight and pass distinct rule 
  #  based on the updates that are not scheduled. 
  cron-this-week-rules:
    handler: cronThisWeekRulesForUpdates.excute
    events:
      - schedule:
          rate: cron(0 0 * * ? *)
          enabled: true
  # This updates simply takes the rule id and schedule all the not scheduled updates. 
  schedule-updates:
    handler: scheduleProductUpdates.schedule
    reservedConcurrency: 30
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}_scheduleUpdates
          batchSize: 1
  # This lambda takes the cron and add captions to the scheduled updates. plus also approve them. 
  cron-add-captions:
    handler: cronAddCaptions.execute
    events:
      - schedule:
          rate: cron(*/5 * * * ? *)
          enabled: true
  # This updates simply takes the rule id and schedule all the not scheduled updates. 
  change-caption:
    handler: changeCaption.update
    reservedConcurrency: 30
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}_changeCaption
          batchSize: 1
  # this lambda runs every 5 minutes and call share-updates lambda to post updates. 
  cron-post-updates:
    handler: cronPostUpdates.share
    events:
      - schedule:
          rate: cron(*/5 * * * ? *)
          enabled: true
  # This lambda post updates to social media. 
  share-updates:
    handler: shareUpdates.share
    reservedConcurrency: 20
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}_shareUpdates
          batchSize: 1
  #  product sync data.
  sync-store-data:
    handler: syncStoreData.syncStoreData  
    reservedConcurrency: 10
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}_syncStoreData
          batchSize: 1
  sync-collections:
    handler: syncStoreData.syncCollections
  sync-collection-page:
    handler: syncStoreData.syncCollectionPage
    reservedConcurrency: 10
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}_syncCollectionPage
          batchSize: 1
  sync-products:
    handler: syncStoreData.syncProducts
    timeout: 360 
  sync-product-page:
    handler: syncStoreData.syncProductPage
    timeout: 360
    reservedConcurrency: 20
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}_syncProductPage
          batchSize: 1
  sync-variant-page:
    handler: syncStoreData.syncVariantPage
    timeout: 360 
    reservedConcurrency: 20
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:${env:AWS_USER_ID}:${env:STAGE}_syncVariantPage
          batchSize: 1
  get-webhooks:
    handler: webhooks.getWebhooks
  data-seed:
    handler: seeddata.createStore
  data-test:
    handler: seeddata.testData
  rule-test:
    handler: seeddata.testRules
  fetch-test:
    handler: seeddata.testFetch

  sync-stores:
    handler: seeddata.syncStores
    events:
      - schedule:
          rate: cron(*/10 * * * ? *)
          enabled: true
  
  # cognito 
  cognito-create-auth-challenge:
    handler: cognito.createAuthChallenge    
  cognito-define-auth-challenge:
    handler: cognito.defineAuthChallenge    
  cognito-verify-auth-challenge:
    handler: cognito.verifyAuthChallenge    

  
  
  # Testing The Lambdas
  test-lambda:
    handler: lambdaTests.execute
  test-webhooks-lambda:
    handler: lambdaWebhooksTests.execute
  test-sync-lambda:
    handler: lambdaSyncTests.execute


# updates
type Update {
  id: ID!
  store: Store!
  rule: Rule
  scheduleType: ScheduleType!
  service: Service
  serviceProfile: ServiceProfile
  product: Product
  profile: Profile
  variant: Variant
  bufferId: String
  scheduleTime: String
  scheduleState: ScheduleState!
  images: [UpdateImages]
  text: String
  suggestedText: String
  postAsOption: String
  postType: String
  failedMessage: String
  postingTime: String
  autoApproveUpdates: Boolean
  autoAddCaptionOfUpdates: Boolean
  captionsUpdated: Boolean
  userEdited: Boolean
  createdAt: String
  updatedAt: String
}
type UpdateImages {  
  url: String
  thumbnailUrl: String
  imageId: ID
  partnerId: String
}

enum ScheduleType {
  product
  variant
  feed
  upload
  link
  blog
}

enum ScheduleState {
  not_scheduled
  pending
  approved
  posted
  failed
  paused
}

input ModelUpdateFilterInput {
  storeId: ID!
  service: Service
  profile: ID
  product: ID
  variant: ID
  type: ModelStringFilterInput
  postType: ModelStringFilterInput
  scheduleType: ScheduleType
  scheduleTime: ModelStringFilterInput
  scheduleState: [ScheduleState]!
}
input editUpdateInput {
 text: String 
 scheduleTime: String
 postAsOption: String
 images: [UpdateImagesInput]
 scheduleState: ScheduleState
}
input UpdateImagesInput {  
  url: String
  thumbnailUrl: String
  imageId: ID
  partnerId: String
}
input createUpdateInput {
 text: String 
 scheduleTime: String!
 postAsOption: String
 profiles: [ID]!
 images: [UpdateImagesInput]
 product: ID
 service: Service
 scheduleType: ScheduleType,
 scheduleState: ScheduleState
 store: ID
}

type ListUpdateResponse {
  totalRecords: Int,
  updates: [Update]
}
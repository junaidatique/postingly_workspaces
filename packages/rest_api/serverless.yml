service: postingly-rest-api

plugins:
  - serverless-plugin-warmup
  - serverless-prune-plugin
  - serverless-plugin-monorepo
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  warmup:
    enabled: ${env:WARMUP_ENABLED} # should only be enabled for production. 
    folderName: '_warmup'
    cleanFolder: false
    memorySize: 256
    name: 'make-them-pop-rest-${env:STAGE}'
    vpc:
      securityGroupIds:
        - sg-0f4152f35882c4eb3
      subnetIds:
        - subnet-0c928dbe126d885eb
        - subnet-067027d8f3d3197fc
      
    events:
      - schedule: 'cron(*/3 * * * ? *)'
    timeout: 20
    prewarm: true
    concurrency: 1

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${env:STAGE}
  region: us-west-2
  timeout: 30 
  memorySize: 256
  vpc:
    securityGroupIds:
      - sg-0f4152f35882c4eb3
    subnetIds:
      - subnet-0c928dbe126d885eb
      - subnet-067027d8f3d3197fc

  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - arn:aws:lambda:us-west-2:*:* 
    - Effect: Allow
      Action:
        - cognito-identity:*
      Resource: 
        - arn:aws:cognito-identity:us-west-2:*:*
    - Effect: Allow
      Action:
        - cognito-sync:*
      Resource: 
        - arn:aws:cognito-sync:us-west-2:*:*
    - Effect: Allow
      Action:
        - cognito-idp:*
      Resource: 
        - arn:aws:cognito-idp:us-west-2:*:*
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        - arn:aws:sqs:us-west-2:*:* 

functions:
  auth:
    handler: index.auth
    events:
      - http:
          path: /partners/{partner_slug}/auth
          method: get
          cors: true
  callback:
    handler: index.callback
    events:
      - http:
          path: /partners/{partner_slug}/callback
          method: post
          cors: true
  payment:
    handler: index.getChargeURL
    events:
      - http:
          path: /partners/{partner_slug}/payment
          method: post
          cors: true
  payment_return:
    handler: index.activatePayment
    events:
      - http:
          path: /partners/{partner_slug}/payment_return
          method: post
          cors: true
  productsCreate:
    handler: index.productsCreate
    reservedConcurrency: ${env:RESERVED_CONCURRENCY_WEBHOOK_CREATE_PRODUCT}
    events:
      - http:
          path: /partners/{partner_slug}/productsCreate
          method: post
          cors: true
  productsUpdate:
    handler: index.productsUpdate
    reservedConcurrency: ${env:RESERVED_CONCURRENCY_WEBHOOK_UPDATE_PRODUCT}
    events:
      - http:
          path: /partners/{partner_slug}/productsUpdate
          method: post
          cors: true
  productsDelete:
    handler: index.productsDelete
    reservedConcurrency: ${env:RESERVED_CONCURRENCY_WEBHOOK_DELETE_PRODUCT}
    events:
      - http:
          path: /partners/{partner_slug}/productsDelete
          method: post
          cors: true
  collectionsCreate:
    handler: index.collectionsCreate
    events:
      - http:
          path: /partners/{partner_slug}/collectionsCreate
          method: post
          cors: true
  collectionsUpdate:
    handler: index.collectionsUpdate
    events:
      - http:
          path: /partners/{partner_slug}/collectionsUpdate
          method: post
          cors: true
  collectionsDelete:
    handler: index.collectionsDelete
    events:
      - http:
          path: /partners/{partner_slug}/collectionsDelete
          method: post
          cors: true
  appUninstalled:
    handler: index.appUninstalled
    events:
      - http:
          path: /partners/{partner_slug}/appUninstalled
          method: post
          cors: true
  shopUpdate:
    handler: index.shopUpdate
    events:
      - http:
          path: /partners/{partner_slug}/shopUpdate
          method: post
          cors: true
  twitterRequestToken:
    handler: index.twitterRequestToken
    events:
      - http:
          path: /twitter/getRequestToken
          method: post
          cors: true

